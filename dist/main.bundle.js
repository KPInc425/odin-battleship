(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"* {\n    box-sizing: border-box;\n}\n\nbody {\n    background-color: black;\n    color: white;\n}\n\n.content {\n    position: relative;\n}\n\n#startButton {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 25%;\n    height: 15%;\n    border: 7px solid white;\n    border-style: outset;\n    background-color: black;\n    color: white;\n    font-weight: 550;\n}\n\n.testing {\n    color: white;\n}\n\n.alphaGridContainer {\n    display: grid;\n    grid-column-start: 2;\n    grid-template-columns: repeat(10, 10%);\n}\n\n.numGridContainer {\n    display: grid;\n    grid-row-start: 2;\n    grid-template-rows: repeat(10, 10%);\n}\n\n.gridContainer {\n    display: grid;\n    grid-template-columns: 5% 95%;\n    grid-template-rows: 5% 95%;\n    /* width: 50%; */\n    /* height: 70%; */\n    min-width: 250px;\n    min-height: 250px;\n    padding: 20px;\n}\n\n.gridPlayerArea {\n    display: grid;\n    grid-column-start: 2;\n    grid-row-start: 2;\n    grid-template-columns: repeat(10, 10%);\n    grid-template-rows: repeat(10, 10%);\n}\n\n.playArea {\n    display: grid;\n    grid-template-columns: 50% 50%;\n    width: 95vw;\n    height: 100vh;\n    margin: 0 auto;\n    justify-content: space-between;\n}\n\n.gridLocation, .gridLabelAlpha, .gridLabelNum {\n    display: flex;\n    border: 1px solid white;\n    align-items: center;\n    justify-content: center;\n    min-height: 1em;\n}\n\n.flex {\n    display: flex;\n}\n\n.gridLocation {\n    position: relative;\n}\n\n.gridLabelAlpha, .gridLabelNum {\n    font-size: 0.75em;\n}\n\n#startButton:hover, .coordHoverPlace:hover {\n    background-color: rgb(0, 255, 0);\n    color: black;\n}\n\n.coordHoverAttack:hover {\n    background-color: rgb(255, 0, 0);\n    color: black;\n}\n\nbutton:hover, .btnSelected {\n    background-color: rgb(0, 0, 255);\n    color: white;\n}\n\n.disableClick {\n    pointer-events: none;\n}\n\n.shipLocation {\n    border: 2px solid blue;\n    background-color: rgb(77, 77, 77);\n}\n\n.narrativeBoard {\n    margin: 0 auto;\n    border: 2px solid white;\n    text-align: center;\n    width: 50%;\n}\n\n.hidden {\n    display: none;\n}\n\n.direction0Button {\n    position: absolute;\n    margin-top: -135%;\n}\n.direction1Button {\n    position: absolute;\n    margin-right: -135%;\n}\n.direction2Button {\n    position: absolute;\n    margin-bottom: -135%;\n}\n.direction3Button {\n    position: absolute;\n    margin-left: -135%;\n}\n\n.buttonDirection, .btnCancelPlaceShip {\n    border: 1px solid white;\n    background-color: black;\n    color: white;\n    font-weight: 550;\n    z-index: 2;\n    width: 24px;\n    height: 24px;\n}\n\n.btnCancelPlaceShip:hover {\n    background-color: red;\n    color: black;\n}\n\n.chosenLocation {\n    background-color: blue;\n}\n\n.btnFocused {\n    background-color: blue;\n    color: white;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,gCAAgC;IAChC,UAAU;IACV,WAAW;IACX,uBAAuB;IACvB,oBAAoB;IACpB,uBAAuB;IACvB,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,oBAAoB;IACpB,sCAAsC;AAC1C;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,0BAA0B;IAC1B,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,oBAAoB;IACpB,iBAAiB;IACjB,sCAAsC;IACtC,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,WAAW;IACX,aAAa;IACb,cAAc;IACd,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gCAAgC;IAChC,YAAY;AAChB;;AAEA;IACI,gCAAgC;IAChC,YAAY;AAChB;;AAEA;IACI,gCAAgC;IAChC,YAAY;AAChB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,sBAAsB;IACtB,iCAAiC;AACrC;;AAEA;IACI,cAAc;IACd,uBAAuB;IACvB,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;AACrB;AACA;IACI,kBAAkB;IAClB,mBAAmB;AACvB;AACA;IACI,kBAAkB;IAClB,oBAAoB;AACxB;AACA;IACI,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,uBAAuB;IACvB,uBAAuB;IACvB,YAAY;IACZ,gBAAgB;IAChB,UAAU;IACV,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,qBAAqB;IACrB,YAAY;AAChB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,YAAY;AAChB",sourcesContent:["* {\n    box-sizing: border-box;\n}\n\nbody {\n    background-color: black;\n    color: white;\n}\n\n.content {\n    position: relative;\n}\n\n#startButton {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 25%;\n    height: 15%;\n    border: 7px solid white;\n    border-style: outset;\n    background-color: black;\n    color: white;\n    font-weight: 550;\n}\n\n.testing {\n    color: white;\n}\n\n.alphaGridContainer {\n    display: grid;\n    grid-column-start: 2;\n    grid-template-columns: repeat(10, 10%);\n}\n\n.numGridContainer {\n    display: grid;\n    grid-row-start: 2;\n    grid-template-rows: repeat(10, 10%);\n}\n\n.gridContainer {\n    display: grid;\n    grid-template-columns: 5% 95%;\n    grid-template-rows: 5% 95%;\n    /* width: 50%; */\n    /* height: 70%; */\n    min-width: 250px;\n    min-height: 250px;\n    padding: 20px;\n}\n\n.gridPlayerArea {\n    display: grid;\n    grid-column-start: 2;\n    grid-row-start: 2;\n    grid-template-columns: repeat(10, 10%);\n    grid-template-rows: repeat(10, 10%);\n}\n\n.playArea {\n    display: grid;\n    grid-template-columns: 50% 50%;\n    width: 95vw;\n    height: 100vh;\n    margin: 0 auto;\n    justify-content: space-between;\n}\n\n.gridLocation, .gridLabelAlpha, .gridLabelNum {\n    display: flex;\n    border: 1px solid white;\n    align-items: center;\n    justify-content: center;\n    min-height: 1em;\n}\n\n.flex {\n    display: flex;\n}\n\n.gridLocation {\n    position: relative;\n}\n\n.gridLabelAlpha, .gridLabelNum {\n    font-size: 0.75em;\n}\n\n#startButton:hover, .coordHoverPlace:hover {\n    background-color: rgb(0, 255, 0);\n    color: black;\n}\n\n.coordHoverAttack:hover {\n    background-color: rgb(255, 0, 0);\n    color: black;\n}\n\nbutton:hover, .btnSelected {\n    background-color: rgb(0, 0, 255);\n    color: white;\n}\n\n.disableClick {\n    pointer-events: none;\n}\n\n.shipLocation {\n    border: 2px solid blue;\n    background-color: rgb(77, 77, 77);\n}\n\n.narrativeBoard {\n    margin: 0 auto;\n    border: 2px solid white;\n    text-align: center;\n    width: 50%;\n}\n\n.hidden {\n    display: none;\n}\n\n.direction0Button {\n    position: absolute;\n    margin-top: -135%;\n}\n.direction1Button {\n    position: absolute;\n    margin-right: -135%;\n}\n.direction2Button {\n    position: absolute;\n    margin-bottom: -135%;\n}\n.direction3Button {\n    position: absolute;\n    margin-left: -135%;\n}\n\n.buttonDirection, .btnCancelPlaceShip {\n    border: 1px solid white;\n    background-color: black;\n    color: white;\n    font-weight: 550;\n    z-index: 2;\n    width: 24px;\n    height: 24px;\n}\n\n.btnCancelPlaceShip:hover {\n    background-color: red;\n    color: black;\n}\n\n.chosenLocation {\n    background-color: blue;\n}\n\n.btnFocused {\n    background-color: blue;\n    color: white;\n}"],sourceRoot:""}]);const l=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var A=[].concat(e[s]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),n.push(A))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var c=e[l],s=r.base?c[0]+r.base:c[0],A=a[s]||0,d="".concat(s," ").concat(A);a[s]=A+1;var u=t(d),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(h);else{var p=o(h,r);r.byIndex=l,n.splice(l,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=t(a[i]);n[l].references--}for(var c=r(e,o),s=0;s<a.length;s++){var A=t(a[s]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{const e=(e,n)=>{const t=e,r=n,o=[],a=[],i=[],l=[];for(let e=0;e<t;e++)for(let n=0;n<r;n++)o.push([e,n,0]);const c=()=>{let e=0;return a.forEach((n=>{!0===n.shipData.sunk&&e++})),e===a.length},s=(e,n)=>{for(let t=0;t<e.length;t++)if(e[t]===n)return!0;return!1},A=e=>("number"!=typeof e&&void 0!==e&&(console.log("Change to Number"),e=Number(e)),e<0||e>o.length||void 0===e?(console.error(`Location Index ${e} is out of bounds!`),!0):1===o[e][2]),d=e=>{if(!Array.isArray(e))return e;for(let n=0;n<o.length;n++)if(o[n][0]===e[0]&&o[n][1]===e[1])return n},u=e=>o[e];return{boardLocArray:o,shipsLocationArray:a,placeShip:(e,n,t,r)=>{if(a.length>4)return console.error("Max ships already placed!"),!1;if(A(d(n)))return console.error("This location is already occupied!"),!1;let i=r||((e,n,t,r)=>{const o={length:e,hits:0,sunk:!1,name:"Battleship",location:null};return{shipData:o,hit:()=>(o.hits+=1,o.hits),isSunk:()=>o.hits>=o.length&&(o.sunk=!0,!0)}})(e);const l=((e,n)=>{let t=[],r=((e,n)=>{const t=[d(n)];for(let r=1;r<e;r++){if(n[0]-r<0)return!1;Array.isArray(n)||(n=u(n));let e=[n[0]-r,n[1]],o=d(e);if(A(o))return!1;t.push(d(e))}return t.length<e?(t=[],!1):t})(e.shipData.length,n),o=((e,n)=>{let t=[d(n)];for(let r=1;r<e;r++){Array.isArray(n)||(n=u(n));let e=[n[0],n[1]+r],o=d(e);if(A(o))return!1;t.push(d(e))}return t.length<e?(t=[],!1):t})(e.shipData.length,n),a=((e,n)=>{let t=[d(n)];for(let r=1;r<e;r++){Array.isArray(n)||(n=u(n));let e=[n[0]+r,n[1]],o=d(e);if(A(o))return!1;t.push(d(e))}return t.length<e?(t=[],!1):t})(e.shipData.length,n),i=((e,n)=>{let t=[d(n)];for(let r=1;r<e;r++){if(n[1]-r<0)return!1;Array.isArray(n)||(n=u(n));let e=[n[0],n[1]-r],o=d(e);if(A(o))return!1;t.push(d(e))}return t.length<e?(t=[],!1):t})(e.shipData.length,n);return r?t.push({direction:"north",indexArray:r}):t.push({direction:"north",indexArray:!1}),o?t.push({direction:"east",indexArray:o}):t.push({direction:"east",indexArray:!1}),a?t.push({direction:"south",indexArray:a}):t.push({direction:"south",indexArray:!1}),i?t.push({direction:"west",indexArray:i}):t.push({direction:"west",indexArray:!1}),t})(i,n);if(l[t].indexArray){let e=l[t].indexArray;i.shipData.location=e;let n=[];for(let t=0;t<e.length;t++)o[e[t]][2]=1,n.push(o[e[t]]);return a.push(i),!0}return console.error(`That move is invalid! You cannot move \n            ${l[t].direction} try again!`),!1},receiveAttack:e=>{let n;if(n=d(e),s(i,n))return console.error("You have already missed there!");if(s(l,n))return console.error("You have already caused destruction there!");let t=A(n);if(t){let e=(e=>{for(let n=0;n<a.length;n++){let t;if(t=!(e>0)||a[n].shipData.location.find((n=>n===e)),t)return a[n]}})(n);return e.hit(),e.isSunk()&&(console.log(`You have sunk the ${e.shipData.name}`),c())?(console.log("All Ships have been destroyed"),!0):(l.push(n),t)}return i.push(n),!1},checkIfLost:c,getLocationIndex:d,checkAllPlaced:()=>a.length>=5}},n=(e,n,t)=>{if(n){const n=[],r=[],o=[],a=[],i=e=>{for(let t=0;t<n.length;t++)if(e[0]===n[t][0]&&e[1]===n[t][1])return console.error("Already Attacked Here!"),!0;return!1},l=e=>{for(let n=0;n<r.length;n++)if(e[0]===r[n][0]&&e[1]===r[n][1])return console.error("Already tried to place Here!"),!0;return!1},c=()=>{if(a.length>0){console.log("Need to attack adjacent locations");let e=a.shift();for(console.log("Adjacent Coords"),console.log(a),console.log(e);i(e);){if(a.length<1)return console.log("Get Random Move"),e=s(),e;e=a.shift()}return console.log(e),n.push(e),e}{let e=s();return n.push(e),e}},s=()=>{const e=t||9;let n=Math.floor(Math.random()*e),r=Math.floor(Math.random()*e),o=[n,r];for(;i(o);)n=Math.floor(Math.random()*e),r=Math.floor(Math.random()*e),o=[n,r];return o},A=()=>{console.log(n),o.push(n[n.length-1]),console.log(o),o.length>1&&(o.shift(),a.length=0),d(),console.log(o)},d=()=>{const e=[o[0][0]-1,o[0][1]],n=[o[0][0],o[0][1]+1],t=[o[0][0]+1,o[0][1]],r=[o[0][0],o[0][1]-1];a.push(e,n,t,r),console.log(a)};return{name:e,randomAttackCoords:c,randomPlacementCoords:()=>{const e=t||9;let n=Math.floor(Math.random()*e),o=Math.floor(Math.random()*e),a=[n,o];for(;l(a);)n=Math.floor(Math.random()*e),o=Math.floor(Math.random()*e),a=[n,o];return r.push(a),a},clearNewGame:()=>{n.length=0,r.length=0},setLastHitCoords:A}}return{name:e}},r=()=>{const e=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],n=(document.querySelector(".content"),document.createElement("div"));n.classList.add("playArea");const t=document.createElement("div");t.classList.add("alphaGridContainer");const r=document.createElement("div");r.classList.add("numGridContainer");const o=document.createElement("div");o.classList.add("gridContainer"),o.id="player1Area";const a=document.createElement("div");a.classList.add("gridPlayerArea");for(let n=0;n<10;n++){let r=document.createElement("div");r.classList.add("gridLabelAlpha"),r.textContent=e[n],t.appendChild(r)}for(let e=0;e<10;e++){let n=document.createElement("div");n.classList.add("gridLabelNum"),n.textContent=e+1,r.appendChild(n)}for(let e=0;e<100;e++){let n=document.createElement("div");n.classList.add("gridLocation"),n.setAttribute("data-index",e),a.appendChild(n)}o.appendChild(t),o.appendChild(r),o.appendChild(a);const i=document.createElement("div");i.classList.add("gridContainer"),i.id="player2Area";const l=t.cloneNode(!0),c=r.cloneNode(!0),s=a.cloneNode(!0);return i.appendChild(l),i.appendChild(c),i.appendChild(s),n.appendChild(o),n.appendChild(i),n},o=(e,n)=>{const t=document.querySelector(`#player${n}Area`).querySelectorAll(".gridLocation");e.gameboard.shipsLocationArray.forEach((e=>{for(let n=0;n<e.shipData.location.length;n++)i(t,e.shipData.location[n]).classList.add("shipLocation")}))},a=()=>{for(;!p.gameboard.placeShip(5,p.character.randomPlacementCoords(),Math.floor(4*Math.random())););for(;!p.gameboard.placeShip(4,p.character.randomPlacementCoords(),Math.floor(4*Math.random())););for(;!p.gameboard.placeShip(3,p.character.randomPlacementCoords(),Math.floor(4*Math.random())););for(;!p.gameboard.placeShip(3,p.character.randomPlacementCoords(),Math.floor(4*Math.random())););for(;!p.gameboard.placeShip(2,p.character.randomPlacementCoords(),Math.floor(4*Math.random())););o(p,2),l(p,2)},i=(e,n)=>{for(let t=0;t<e.length;t++)if(Number(e[t].getAttribute("data-index"))===n)return e[t]},l=(e,n)=>{document.querySelector(`#player${n}Area`).querySelectorAll(".gridLocation").forEach((t=>{t.classList.add("coordHoverAttack"),t.addEventListener("click",(t=>{t.target.classList.remove("coordHoverAttack"),s(t.target,e,n)}),{once:!0})}))},c=()=>{if(h.gameboard.checkIfLost())u(`${p.character.name} Has sunk all of ${h.character.name}'s Ships!`),setTimeout((()=>(u(`${p.character.name} Wins!`),A(),!0)),1e3);else{if(!p.gameboard.checkIfLost())return!1;u(`${h.character.name} Has sunk all of ${p.character.name}'s Ships!`),setTimeout((()=>(u(`${h.character.name} Wins!`),A(),!0)),1e3)}},s=(e,n,t)=>{let r,o=document.querySelector(`#player${t}Area`);r=1===t?2:1;let a=n.gameboard.receiveAttack(Number(e.getAttribute("data-index")));u(`${h.character.name} sends missles!`),setTimeout((()=>{d(a,e),g()?console.log(`It is now Player${t}'s turn!`):c()?console.log("Game Over!"):setTimeout((()=>{u(`${p.character.name} Retaliates!`),console.log("AI Attacks!"),setTimeout((()=>{u(`${n.character.name} sends a missle!`),setTimeout((()=>{let e=p.character.randomAttackCoords();console.log(e);let n=h.gameboard.receiveAttack(e);if(n&&p.character.setLastHitCoords(),c())console.log("GameOver!");else{let t=h.gameboard.getLocationIndex(e),r=document.querySelector("#player1Area").querySelector(".gridPlayerArea").querySelectorAll(".gridLocation");for(let e=0;e<r.length;e++)if(Number(r[e].getAttribute("data-index"))===t)return d(n,r[e]),void setTimeout((()=>{u(`${h.character.name}'s turn to attack!`),o.classList.remove("disableClick")}),500)}}),500)}),500)}),500)}),500),o.classList.add("disableClick")},A=()=>{document.querySelector("#startButton").classList.toggle("hidden")},d=(e,n)=>{e?(u("And it's a Hit!"),n.textContent="X",n.classList.remove("coordHover")):(u("And it's a Miss..."),n.textContent="O",n.classList.remove("coordHover"))},u=e=>{document.querySelector(".narrativeBoard p").textContent=e},h={character:n("KP",!1),gameboard:e(10,10)},p={character:n("Robot",!0),gameboard:e(10,10)},g=((()=>{const n=document.querySelector(".content");(()=>{const e=document.querySelector(".content"),n=document.createElement("div");n.classList.add("narrativeBoard");const t=document.createElement("p");t.textContent="Welcome to BattleShip",n.appendChild(t),e.appendChild(n)})(),n.appendChild(r()),((n,t,i)=>{const l=document.querySelector(".content"),c=(()=>{const e=document.createElement("button");return e.id="startButton",e.classList.add("startButton"),e.textContent="Start New Game",e.value="Start New Game",e})();c.addEventListener("click",(()=>{A();let i=document.querySelector(".playArea");n.gameboard.shipsLocationArray.length>0&&(console.log("old game"),i.replaceWith(r()),n.gameboard=e(10,10),t.gameboard=e(10,10),t.character.clearNewGame(),i=document.querySelector(".playArea")),n.gameboard.placeShip(5,[5,5],3),n.gameboard.placeShip(4,[6,5],3),n.gameboard.placeShip(3,[7,5],3),n.gameboard.placeShip(3,[4,5],0),n.gameboard.placeShip(2,[5,8],3),o(n,1),a()}),{once:!1}),l.appendChild(c)})(h,p)})(),()=>0);var m=t(379),C=t.n(m),b=t(795),f=t.n(b),B=t(569),v=t.n(B),I=t(565),y=t.n(I),k=t(216),x=t.n(k),w=t(589),L=t.n(w),S=t(426),E={};E.styleTagTransform=L(),E.setAttributes=y(),E.insert=v().bind(null,"head"),E.domAPI=f(),E.insertStyleElement=x(),C()(S.Z,E),S.Z&&S.Z.locals&&S.Z.locals})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,