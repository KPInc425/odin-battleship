(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([e.id,"* {\n    box-sizing: border-box;\n}\n\nbody {\n    background-color: black;\n    color: white;\n}\n\n.content {\n    position: relative;\n}\n\n#startButton {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 25%;\n    height: 15%;\n    border: 7px solid white;\n    border-style: outset;\n    background-color: black;\n    color: white;\n    font-weight: 550;\n}\n\n.testing {\n    color: white;\n}\n\n.alphaGridContainer {\n    display: grid;\n    grid-column-start: 2;\n    grid-template-columns: repeat(10, 10%);\n}\n\n.numGridContainer {\n    display: grid;\n    grid-row-start: 2;\n    grid-template-rows: repeat(10, 10%);\n}\n\n.gridContainer {\n    display: grid;\n    grid-template-columns: 5% 95%;\n    grid-template-rows: 5% 95%;\n    /* width: 50%; */\n    /* height: 70%; */\n    min-width: 250px;\n    min-height: 250px;\n    padding: 20px;\n}\n\n.gridPlayerArea {\n    display: grid;\n    grid-column-start: 2;\n    grid-row-start: 2;\n    grid-template-columns: repeat(10, 10%);\n    grid-template-rows: repeat(10, 10%);\n}\n\n.playArea {\n    display: grid;\n    grid-template-columns: 50% 50%;\n    width: 95vw;\n    height: 100vh;\n    margin: 0 auto;\n    justify-content: space-between;\n}\n\n.gridLocation, .gridLabelAlpha, .gridLabelNum {\n    display: flex;\n    border: 1px solid white;\n    align-items: center;\n    justify-content: center;\n    min-height: 1em;\n}\n\n.flex {\n    display: flex;\n}\n\n.gridLocation {\n    position: relative;\n}\n\n.gridLabelAlpha, .gridLabelNum {\n    font-size: 0.75em;\n}\n\n#startButton:hover, .coordHoverPlace:hover {\n    background-color: rgb(0, 255, 0);\n    color: black;\n}\n\n.coordHoverAttack:hover {\n    background-color: rgb(255, 0, 0);\n    color: black;\n}\n\nbutton:hover, .btnSelected {\n    background-color: rgb(0, 0, 255);\n    color: white;\n}\n\n.disableClick {\n    pointer-events: none;\n}\n\n.shipLocation {\n    border: 2px solid blue;\n    background-color: rgb(77, 77, 77);\n}\n\n.narrativeBoard {\n    margin: 0 auto;\n    border: 2px solid white;\n    text-align: center;\n    width: 50%;\n}\n\n.hidden {\n    display: none;\n}\n\n.direction0Button {\n    position: absolute;\n    margin-top: -135%;\n}\n.direction1Button {\n    position: absolute;\n    margin-right: -135%;\n}\n.direction2Button {\n    position: absolute;\n    margin-bottom: -135%;\n}\n.direction3Button {\n    position: absolute;\n    margin-left: -135%;\n}\n\n.buttonDirection, .btnCancelPlaceShip {\n    border: 1px solid white;\n    background-color: black;\n    color: white;\n    font-weight: 550;\n    z-index: 2;\n    width: 24px;\n    height: 24px;\n}\n\n.btnCancelPlaceShip:hover {\n    background-color: red;\n    color: black;\n}\n\n.chosenLocation {\n    background-color: blue;\n}\n\n.btnFocused {\n    background-color: blue;\n    color: white;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,gCAAgC;IAChC,UAAU;IACV,WAAW;IACX,uBAAuB;IACvB,oBAAoB;IACpB,uBAAuB;IACvB,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,oBAAoB;IACpB,sCAAsC;AAC1C;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,0BAA0B;IAC1B,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,oBAAoB;IACpB,iBAAiB;IACjB,sCAAsC;IACtC,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,WAAW;IACX,aAAa;IACb,cAAc;IACd,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gCAAgC;IAChC,YAAY;AAChB;;AAEA;IACI,gCAAgC;IAChC,YAAY;AAChB;;AAEA;IACI,gCAAgC;IAChC,YAAY;AAChB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,sBAAsB;IACtB,iCAAiC;AACrC;;AAEA;IACI,cAAc;IACd,uBAAuB;IACvB,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;AACrB;AACA;IACI,kBAAkB;IAClB,mBAAmB;AACvB;AACA;IACI,kBAAkB;IAClB,oBAAoB;AACxB;AACA;IACI,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,uBAAuB;IACvB,uBAAuB;IACvB,YAAY;IACZ,gBAAgB;IAChB,UAAU;IACV,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,qBAAqB;IACrB,YAAY;AAChB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,YAAY;AAChB",sourcesContent:["* {\n    box-sizing: border-box;\n}\n\nbody {\n    background-color: black;\n    color: white;\n}\n\n.content {\n    position: relative;\n}\n\n#startButton {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 25%;\n    height: 15%;\n    border: 7px solid white;\n    border-style: outset;\n    background-color: black;\n    color: white;\n    font-weight: 550;\n}\n\n.testing {\n    color: white;\n}\n\n.alphaGridContainer {\n    display: grid;\n    grid-column-start: 2;\n    grid-template-columns: repeat(10, 10%);\n}\n\n.numGridContainer {\n    display: grid;\n    grid-row-start: 2;\n    grid-template-rows: repeat(10, 10%);\n}\n\n.gridContainer {\n    display: grid;\n    grid-template-columns: 5% 95%;\n    grid-template-rows: 5% 95%;\n    /* width: 50%; */\n    /* height: 70%; */\n    min-width: 250px;\n    min-height: 250px;\n    padding: 20px;\n}\n\n.gridPlayerArea {\n    display: grid;\n    grid-column-start: 2;\n    grid-row-start: 2;\n    grid-template-columns: repeat(10, 10%);\n    grid-template-rows: repeat(10, 10%);\n}\n\n.playArea {\n    display: grid;\n    grid-template-columns: 50% 50%;\n    width: 95vw;\n    height: 100vh;\n    margin: 0 auto;\n    justify-content: space-between;\n}\n\n.gridLocation, .gridLabelAlpha, .gridLabelNum {\n    display: flex;\n    border: 1px solid white;\n    align-items: center;\n    justify-content: center;\n    min-height: 1em;\n}\n\n.flex {\n    display: flex;\n}\n\n.gridLocation {\n    position: relative;\n}\n\n.gridLabelAlpha, .gridLabelNum {\n    font-size: 0.75em;\n}\n\n#startButton:hover, .coordHoverPlace:hover {\n    background-color: rgb(0, 255, 0);\n    color: black;\n}\n\n.coordHoverAttack:hover {\n    background-color: rgb(255, 0, 0);\n    color: black;\n}\n\nbutton:hover, .btnSelected {\n    background-color: rgb(0, 0, 255);\n    color: white;\n}\n\n.disableClick {\n    pointer-events: none;\n}\n\n.shipLocation {\n    border: 2px solid blue;\n    background-color: rgb(77, 77, 77);\n}\n\n.narrativeBoard {\n    margin: 0 auto;\n    border: 2px solid white;\n    text-align: center;\n    width: 50%;\n}\n\n.hidden {\n    display: none;\n}\n\n.direction0Button {\n    position: absolute;\n    margin-top: -135%;\n}\n.direction1Button {\n    position: absolute;\n    margin-right: -135%;\n}\n.direction2Button {\n    position: absolute;\n    margin-bottom: -135%;\n}\n.direction3Button {\n    position: absolute;\n    margin-left: -135%;\n}\n\n.buttonDirection, .btnCancelPlaceShip {\n    border: 1px solid white;\n    background-color: black;\n    color: white;\n    font-weight: 550;\n    z-index: 2;\n    width: 24px;\n    height: 24px;\n}\n\n.btnCancelPlaceShip:hover {\n    background-color: red;\n    color: black;\n}\n\n.chosenLocation {\n    background-color: blue;\n}\n\n.btnFocused {\n    background-color: blue;\n    color: white;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],s=o.base?l[0]+o.base:l[0],d=a[s]||0,A="".concat(s," ").concat(d);a[s]=d+1;var u=n(A),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var p=r(h,o);o.byIndex=c,t.splice(c,0,{identifier:A,updater:p,references:1})}i.push(A)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var l=o(e,r),s=0;s<a.length;s++){var d=n(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=(e,t)=>{const n=e,o=t,r=[],a=[],i=[],c=[];for(let e=0;e<n;e++)for(let t=0;t<o;t++)r.push([e,t,0]);const l=()=>{let e=0;return a.forEach((t=>{!0===t.shipData.sunk&&e++})),e===a.length},s=(e,t)=>{for(let n=0;n<e.length;n++)if(e[n]===t)return!0;return!1},d=e=>("number"!=typeof e&&void 0!==e&&(console.log("Change to Number"),e=Number(e)),e<0||e>r.length||void 0===e?(console.error(`Location Index ${e} is out of bounds!`),!0):1===r[e][2]),A=e=>{if(!Array.isArray(e))return e;for(let t=0;t<r.length;t++)if(r[t][0]===e[0]&&r[t][1]===e[1])return t},u=e=>r[e];return{boardLocArray:r,shipsLocationArray:a,placeShip:(e,t,n,o)=>{if(a.length>4)return console.error("Max ships already placed!"),!1;if(d(A(t)))return console.error("This location is already occupied!"),!1;let i=o||((e,t,n,o)=>{const r={length:e,hits:0,sunk:!1,name:"Battleship",location:null};return{shipData:r,hit:()=>(r.hits+=1,r.hits),isSunk:()=>r.hits>=r.length&&(r.sunk=!0,!0)}})(e);const c=((e,t)=>{let n=[],o=((e,t)=>{const n=[A(t)];for(let o=1;o<e;o++){if(t[0]-o<0)return!1;Array.isArray(t)||(t=u(t));let e=[t[0]-o,t[1]],r=A(e);if(d(r))return!1;n.push(A(e))}return n.length<e?(n=[],!1):n})(e.shipData.length,t),r=((e,t)=>{let n=[A(t)];for(let o=1;o<e;o++){Array.isArray(t)||(t=u(t));let e=[t[0],t[1]+o],r=A(e);if(d(r))return!1;n.push(A(e))}return n.length<e?(n=[],!1):n})(e.shipData.length,t),a=((e,t)=>{let n=[A(t)];for(let o=1;o<e;o++){Array.isArray(t)||(t=u(t));let e=[t[0]+o,t[1]],r=A(e);if(d(r))return!1;n.push(A(e))}return n.length<e?(n=[],!1):n})(e.shipData.length,t),i=((e,t)=>{let n=[A(t)];for(let o=1;o<e;o++){if(t[1]-o<0)return!1;Array.isArray(t)||(t=u(t));let e=[t[0],t[1]-o],r=A(e);if(d(r))return!1;n.push(A(e))}return n.length<e?(n=[],!1):n})(e.shipData.length,t);return o?n.push({direction:"north",indexArray:o}):n.push({direction:"north",indexArray:!1}),r?n.push({direction:"east",indexArray:r}):n.push({direction:"east",indexArray:!1}),a?n.push({direction:"south",indexArray:a}):n.push({direction:"south",indexArray:!1}),i?n.push({direction:"west",indexArray:i}):n.push({direction:"west",indexArray:!1}),n})(i,t);if(c[n].indexArray){let e=c[n].indexArray;i.shipData.location=e;let t=[];for(let n=0;n<e.length;n++)r[e[n]][2]=1,t.push(r[e[n]]);return a.push(i),!0}return console.error(`That move is invalid! You cannot move \n            ${c[n].direction} try again!`),!1},receiveAttack:e=>{let t;if(t=A(e),s(i,t))return console.error("You have already missed there!");if(s(c,t))return console.error("You have already caused destruction there!");let n=d(t);if(n){let e=(e=>{for(let t=0;t<a.length;t++){let n;if(n=!(e>0)||a[t].shipData.location.find((t=>t===e)),n)return a[t]}})(t);return e.hit(),e.isSunk()&&(console.log(`You have sunk the ${e.shipData.name}`),l())?(console.log("All Ships have been destroyed"),!0):(c.push(t),n)}return i.push(t),!1},checkIfLost:l,getLocationIndex:A,checkAllPlaced:()=>a.length>=5}},t=(e,t,n)=>{if(t){const t=[],o=[],r=[],a=[],i=e=>{for(let n=0;n<t.length;n++)if(e[0]===t[n][0]&&e[1]===t[n][1])return console.error("Already Attacked Here!"),!0;return!1},c=e=>{for(let t=0;t<o.length;t++)if(e[0]===o[t][0]&&e[1]===o[t][1])return console.error("Already tried to place Here!"),!0;return!1},l=()=>{if(a.length>0){console.log("Need to attack adjacent locations");let e=a.shift();for(console.log("Adjacent Coords"),console.log(a),console.log(e);i(e);){if(a.length<1)return console.log("Get Random Move"),e=s(),e;e=a.shift()}return console.log(e),t.push(e),e}{let e=s();return t.push(e),e}},s=()=>{const e=n||9;let t=Math.floor(Math.random()*e),o=Math.floor(Math.random()*e),r=[t,o];for(;i(r);)t=Math.floor(Math.random()*e),o=Math.floor(Math.random()*e),r=[t,o];return r},d=()=>{console.log(t),r.push(t[t.length-1]),console.log(r),r.length>1&&(r.shift(),a.length=0),A(),console.log(r)},A=()=>{const e=[r[0][0]-1,r[0][1]],t=[r[0][0],r[0][1]+1],n=[r[0][0]+1,r[0][1]],o=[r[0][0],r[0][1]-1];a.push(e,t,n,o),console.log(a)};return{name:e,randomAttackCoords:l,randomPlacementCoords:()=>{const e=n||9;let t=Math.floor(Math.random()*e),r=Math.floor(Math.random()*e),a=[t,r];for(;c(a);)t=Math.floor(Math.random()*e),r=Math.floor(Math.random()*e),a=[t,r];return o.push(a),a},clearNewGame:()=>{t.length=0,o.length=0},setLastHitCoords:d}}return{name:e}},o=e=>{if(!e){const e=document.createElement("form");e.classList.add("inputForm"),e.id="player1Input";const t=document.createElement("input");t.placeholder="Enter Ship Name";const n=document.createElement("button");n.textContent="Place Ship",n.value="Place Ship",n.classList.add("btnPlaceShip"),n.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector(".btnSelected");n.classList.add("btnFocused"),t?r(C,b,0,0):console.log("No ship Selected. Choose ship to place.")}));const o=document.createElement("div");o.classList.add("flex");let a=2;for(let e=0;e<5;e++){const e=document.createElement("button");e.textContent=`${a} length`,e.value=`${a}`,e.classList.add("btnShip"),e.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector(".btnSelected");t&&t.classList.remove("btnSelected"),e.target.classList.add("btnSelected")})),o.appendChild(e),o.children.length>0&&(a++,o.children.length>1&&o.children.length<3&&a--)}return e.appendChild(t),e.appendChild(n),e.appendChild(o),e}},r=(e,t,n,o)=>{n||o||s(e,1)},a=()=>{const e=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],t=(document.querySelector(".content"),document.createElement("div"));t.classList.add("playArea");const n=document.createElement("div");n.classList.add("alphaGridContainer");const o=document.createElement("div");o.classList.add("numGridContainer");const r=document.createElement("div");r.classList.add("gridContainer"),r.id="player1Area";const a=document.createElement("div");a.classList.add("gridPlayerArea");for(let t=0;t<10;t++){let o=document.createElement("div");o.classList.add("gridLabelAlpha"),o.textContent=e[t],n.appendChild(o)}for(let e=0;e<10;e++){let t=document.createElement("div");t.classList.add("gridLabelNum"),t.textContent=e+1,o.appendChild(t)}for(let e=0;e<100;e++){let t=document.createElement("div");t.classList.add("gridLocation"),t.setAttribute("data-index",e),a.appendChild(t)}r.appendChild(n),r.appendChild(o),r.appendChild(a);const i=document.createElement("div");i.classList.add("gridContainer"),i.id="player2Area";const c=n.cloneNode(!0),l=o.cloneNode(!0),s=a.cloneNode(!0);return i.appendChild(c),i.appendChild(l),i.appendChild(s),t.appendChild(r),t.appendChild(i),t},i=(e,t)=>{for(let n=0;n<e.length;n++)if(Number(e[n].getAttribute("data-index"))===t)return e[n]},c=(e,t)=>{document.querySelector(`#player${t}Area`).querySelectorAll(".gridLocation").forEach((n=>{n.classList.add("coordHoverAttack"),n.addEventListener("click",(n=>{n.target.classList.remove("coordHoverAttack"),h(n.target,e,t)}),{once:!0})}))},l=()=>{console.log("Cleared Coord Location");const e=document.querySelector(".chosenLocation");e&&(e.innerHTML="",e.classList.remove("chosenLocation"),e.classList.add("coordHoverPlace"))},s=(e,t)=>{const n=document.querySelector(`#player${t}Area`);n.classList.contains(".disableClick")?n.classList.remove(".disableClick"):n.querySelectorAll(".gridLocation").forEach((n=>{n.classList.add("coordHoverPlace"),n.addEventListener("click",(n=>{console.log("Coords Clicked!"),n.stopImmediatePropagation(),document.querySelector(".chosenLocation")&&(n.target.classList.contains("buttonDirection")||l()),n.target.classList.contains("gridLocation")&&(n.target.classList.contains("chosenLocation")||(n.target.classList.add("chosenLocation"),n.target.setAttribute("data-playerIndex",t),n.target.classList.remove("coordHoverPlace"),d(e,n.target)))}),{once:!1})}))},d=(e,t)=>{const n=[{direction:0,symbol:"↑"},{direction:1,symbol:"→"},{direction:2,symbol:"↓"},{direction:3,symbol:"←"}];for(let o=0;o<4;o++){const r=document.createElement("button");r.classList.add(`direction${o}Button`),r.classList.add("buttonDirection"),r.textContent=n[o].symbol,r.setAttribute("data-direction",n[o].direction),r.addEventListener("click",(t=>{A(e,t.target.getAttribute("data-direction"));const n=document.querySelector(".chosenLocation");n.innerHTML="",n.classList.remove("chosenLocation")})),t.appendChild(r)}const o=document.createElement("button");o.textContent="X",o.value="Cancel Place Ship",o.classList.add("btnCancelPlaceShip"),o.addEventListener("click",(()=>{l(),document.querySelector(".inputForm").classList.remove("disableClick")})),t.appendChild(o)},A=(e,t)=>{let n=document.querySelector(".btnSelected");if(n){const o=n.value;if(!o)return void console.log("Ship Length button must be selected1");const r=document.querySelector(".chosenLocation"),a=Number(r.getAttribute("data-index")),l=Number(r.getAttribute("data-playerIndex"));e.gameboard.placeShip(o,a,t)&&((e,t)=>{const n=document.querySelector(`#player${t}Area`).querySelectorAll(".gridLocation"),o=e.gameboard.shipsLocationArray[e.gameboard.shipsLocationArray.length-1];for(let e=0;e<o.shipData.location.length;e++){let t=i(n,o.shipData.location[e]);t.classList.add("shipLocation"),t.classList.remove("coordHoverPlace")}let r=document.querySelector(".btnSelected");if(r.disabled=!0,r.classList.add("disableClick"),r.classList.remove("btnSelected"),e.gameboard.checkAllPlaced()){a=1,console.log("Removing Event Listeners"),document.querySelector(`#player${a}Area`).querySelectorAll(".gridLocation").forEach((e=>{e.classList.remove("coordHoverPlace"),e.outerHTML=e.outerHTML}));const e=document.querySelector(".btnPlaceShip");e.disabled=!0,e.classList.add("disableClick"),document.querySelector("#player1Input").classList.add("hidden"),(()=>{for(;!b.gameboard.placeShip(5,b.character.randomPlacementCoords(),Math.floor(4*Math.random())););for(;!b.gameboard.placeShip(4,b.character.randomPlacementCoords(),Math.floor(4*Math.random())););for(;!b.gameboard.placeShip(3,b.character.randomPlacementCoords(),Math.floor(4*Math.random())););for(;!b.gameboard.placeShip(3,b.character.randomPlacementCoords(),Math.floor(4*Math.random())););for(;!b.gameboard.placeShip(2,b.character.randomPlacementCoords(),Math.floor(4*Math.random())););c(b,2)})()}else{const e=document.querySelectorAll(".btnShip");for(let t=0;t<e.length;t++)if(!e[t].classList.contains("disableClick"))return void e[t].classList.add("btnSelected")}var a})(e,l)}else console.error("No length selected!")},u=()=>{if(C.gameboard.checkIfLost())g(`${b.character.name} Has sunk all of ${C.character.name}'s Ships!`),setTimeout((()=>(g(`${b.character.name} Wins!`),p(),!0)),1e3);else{if(!b.gameboard.checkIfLost())return!1;g(`${C.character.name} Has sunk all of ${b.character.name}'s Ships!`),setTimeout((()=>(g(`${C.character.name} Wins!`),p(),!0)),1e3)}},h=(e,t,n)=>{let o,r=document.querySelector(`#player${n}Area`);o=1===n?2:1;let a=t.gameboard.receiveAttack(Number(e.getAttribute("data-index")));g(`${C.character.name} sends missles!`),setTimeout((()=>{m(a,e),f()?console.log(`It is now Player${n}'s turn!`):u()?console.log("Game Over!"):setTimeout((()=>{g(`${b.character.name} Retaliates!`),console.log("AI Attacks!"),setTimeout((()=>{g(`${t.character.name} sends a missle!`),setTimeout((()=>{let e=b.character.randomAttackCoords();console.log(e);let t=C.gameboard.receiveAttack(e);if(t&&b.character.setLastHitCoords(),u())console.log("GameOver!");else{let n=C.gameboard.getLocationIndex(e),o=document.querySelector("#player1Area").querySelector(".gridPlayerArea").querySelectorAll(".gridLocation");for(let e=0;e<o.length;e++)if(Number(o[e].getAttribute("data-index"))===n)return m(t,o[e]),void setTimeout((()=>{g(`${C.character.name}'s turn to attack!`),r.classList.remove("disableClick")}),500)}}),500)}),500)}),500)}),500),r.classList.add("disableClick")},p=()=>{document.querySelector("#startButton").classList.toggle("hidden")},m=(e,t)=>{e?(g("And it's a Hit!"),t.textContent="X",t.classList.remove("coordHover")):(g("And it's a Miss..."),t.textContent="O",t.classList.remove("coordHover"))},g=e=>{document.querySelector(".narrativeBoard p").textContent=e},C={character:t("KP",!1),gameboard:e(10,10)},b={character:t("Robot",!0),gameboard:e(10,10)},f=((()=>{const t=document.querySelector(".content");(()=>{const e=document.querySelector(".content"),t=document.createElement("div");t.classList.add("narrativeBoard");const n=document.createElement("p");n.textContent="Welcome to BattleShip",t.appendChild(n),e.appendChild(t)})(),t.appendChild(a()),((t,n,r)=>{const i=document.querySelector(".content"),c=(()=>{const e=document.createElement("button");return e.id="startButton",e.classList.add("startButton"),e.textContent="Start New Game",e.value="Start New Game",e})();c.addEventListener("click",(()=>{p();let r=document.querySelector(".playArea");return t.gameboard.shipsLocationArray.length>0&&(console.log("old game"),r.replaceWith(a()),t.gameboard=e(10,10),n.gameboard=e(10,10),n.character.clearNewGame(),r=document.querySelector(".playArea")),r.appendChild(o())}),{once:!1}),i.appendChild(c)})(C,b)})(),()=>0);var B=n(379),v=n.n(B),y=n(795),I=n.n(y),L=n(569),k=n.n(L),x=n(565),S=n.n(x),w=n(216),E=n.n(w),M=n(589),P=n.n(M),q=n(426),N={};N.styleTagTransform=P(),N.setAttributes=S(),N.insert=k().bind(null,"head"),N.domAPI=I(),N.insertStyleElement=E(),v()(q.Z,N),q.Z&&q.Z.locals&&q.Z.locals})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,